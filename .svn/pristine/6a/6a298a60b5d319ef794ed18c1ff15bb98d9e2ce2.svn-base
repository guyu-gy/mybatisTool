<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaoniu56.dao.FkConstraintMapper" >
  <resultMap id="BaseResultMap" type="com.xiaoniu56.model.defaults.FkConstraint" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="constraint_name" property="constraintName" jdbcType="VARCHAR" />
    <result column="table_name" property="tableName" jdbcType="VARCHAR" />
    <result column="column_name" property="columnName" jdbcType="VARCHAR" />
    <result column="referenced_table_name" property="referencedTableName" jdbcType="VARCHAR" />
    <result column="referenced_column_name" property="referencedColumnName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, constraint_name, table_name, column_name, referenced_table_name, referenced_column_name
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.xiaoniu56.model.defaults.FkConstraintExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from xn_m_fk_constraint
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from xn_m_fk_constraint
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from xn_m_fk_constraint
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiaoniu56.model.defaults.FkConstraintExample" >
    delete from xn_m_fk_constraint
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiaoniu56.model.defaults.FkConstraint" >
    insert into xn_m_fk_constraint (id, constraint_name, table_name, 
      column_name, referenced_table_name, referenced_column_name
      )
    values (#{id,jdbcType=BIGINT}, #{constraintName,jdbcType=VARCHAR}, #{tableName,jdbcType=VARCHAR}, 
      #{columnName,jdbcType=VARCHAR}, #{referencedTableName,jdbcType=VARCHAR}, #{referencedColumnName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xiaoniu56.model.defaults.FkConstraint" >
    insert into xn_m_fk_constraint
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="constraintName != null" >
        constraint_name,
      </if>
      <if test="tableName != null" >
        table_name,
      </if>
      <if test="columnName != null" >
        column_name,
      </if>
      <if test="referencedTableName != null" >
        referenced_table_name,
      </if>
      <if test="referencedColumnName != null" >
        referenced_column_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="constraintName != null" >
        #{constraintName,jdbcType=VARCHAR},
      </if>
      <if test="tableName != null" >
        #{tableName,jdbcType=VARCHAR},
      </if>
      <if test="columnName != null" >
        #{columnName,jdbcType=VARCHAR},
      </if>
      <if test="referencedTableName != null" >
        #{referencedTableName,jdbcType=VARCHAR},
      </if>
      <if test="referencedColumnName != null" >
        #{referencedColumnName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiaoniu56.model.defaults.FkConstraintExample" resultType="java.lang.Integer" >
    select count(*) from xn_m_fk_constraint
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiaoniu56.model.defaults.FkConstraint" >
    update xn_m_fk_constraint
    <set >
      <if test="constraintName != null" >
        constraint_name = #{constraintName,jdbcType=VARCHAR},
      </if>
      <if test="tableName != null" >
        table_name = #{tableName,jdbcType=VARCHAR},
      </if>
      <if test="columnName != null" >
        column_name = #{columnName,jdbcType=VARCHAR},
      </if>
      <if test="referencedTableName != null" >
        referenced_table_name = #{referencedTableName,jdbcType=VARCHAR},
      </if>
      <if test="referencedColumnName != null" >
        referenced_column_name = #{referencedColumnName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiaoniu56.model.defaults.FkConstraint" >
    update xn_m_fk_constraint
    set constraint_name = #{constraintName,jdbcType=VARCHAR},
      table_name = #{tableName,jdbcType=VARCHAR},
      column_name = #{columnName,jdbcType=VARCHAR},
      referenced_table_name = #{referencedTableName,jdbcType=VARCHAR},
      referenced_column_name = #{referencedColumnName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>